Algorithm for requesting Resources:

When a process makes each resource request in a system as a request matrix, a resource request algorithm examines how the system will behave.

For each process P[i], let's make a resource request array R[i]. If the Resource request [j] equals 'K,' the process P[i] requires the system to have 'k' instances of Resources type R[j].

1. If the number of requested resources of each kind is less than the Need resources, go to step 2; if the condition fails, the process P[i] has claimed the resource to its utmost extent.
If Need(i) => request(i),
Continue to step 2;

2. If the number of requested resources of each kind is fewer than the amount of resources available for each operation, go to step 3. (3). As the phrase suggests,

If request(i) <= available
If request(i) = available

3. When the process's requested resource is allotted by changing state:

available = request-available
Allocation(i) =request (i) + Allocation(i) 
eedi = requesti - Needi 
When the resource allocation state is safe, the process P receives its resources (i). If the new state is hazardous, Process P I must wait for each type of request R(i) before returning to the previous resource-allocation state.

Consider a system with five processes P1, P2, P3, P4, and P5, as well as three resource categories A, B, and C. The sorts of resources are as follows: There are ten examples of resource type A, five instances of resource type B, and seven occurrences of resource type C.

ProcessAllocation
a   b    c  max
a   b    c  available
a   b    c
p1  0    1    0	7    5    3	3    3    2
p2  2    0    0	3    2    2	
p3  3    0    2	9    0    2	
p4  2    1    1	2    2    2	
p5  0    0    2	4    3    3
Need [i] = Max [i] - Allocation [i]
Need for P1: (3,5,7) - (0, 1, 0) = 3,4,7
Need for P2: (2,2,3) - (0,0,2) = 2,2,1
Need for P3: (2,0,9) - (2,0,3) = 0,0,6
Need for P4: (2, 2, 2) - (1,1,2) = 1,1,0
Need for P5: (3,3,4) - (2,0,0) = 1,3,4
ProcessNeed
A    B    C
P1	7    4    3
P2	1    2    2
P3	6    0    0
P4	0    1    1
P5	4    3    1

Use the banker's formula:
The available resources for processes a, b, and c are 2, 3, and 3, respectively. Now we'll see if each sort of resource request is available for each process.
For process P1:
need <= available
3,4,7<=2,3,3 condation is false.
For process p2:
need <= available
2,2,1<=2,3,3 condition true
new available = available + allocation
(2,3,3)+(0,0,2)=>2,3,5
For process p3:
p3 need <= available
0,0,6<=2,3,5 condition is false
For process p4:
p4 need <=available
1,1,0<=2,3,5 condition is true
new available resources =available + allocation
2,3,5+1,1,2=>3,4,7
For process p5:
p5 need <= available 
1,3,4 <=3,4,7 condition is true
now available resource= available +allocation
3,4,7+2,0,0=>5,4,7
we can examine each type of resource request for processes p1 and p3
For process p1:
p1 need <=available
3,4,7+2,0,0=>5,4,7 condition is true
new available resource = available +allocation
5,4,7+0,1,0=>5,5,7
For process p3:
p3 need <= available 
0,0,6<=5,5,7 condition is true
new available resource =available +allocation
5,5,7+2,0,3=>7,5,10
we can execute the banker's algorithm to find the safe state and the safe sequence like p2,p4,p5,p1 and p3.

